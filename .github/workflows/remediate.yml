name: 'Reusable Workflow: Remediation'

on:
  workflow_call:
    inputs:
      pacEnvironmentSelector:
        required: true
        type: string
      planGitHubEnvironment:
        required: true
        type: string
      PAC_DEFINITIONS_FOLDER:
        required: true
        type: string
      complianceScopesResourceIds:
        required: false
        type: string
      complianceScopesIgnoreResourceIds:
        required: false
        type: string

env:
  pacEnvironmentSelector: ${{ inputs.pacEnvironmentSelector }}
  PAC_DEFINITIONS_FOLDER: ${{ inputs.PAC_DEFINITIONS_FOLDER }}
  complianceScopesResourceIds: ${{ inputs.complianceScopesResourceIds }}
  complianceScopesIgnoreResourceIds: ${{ inputs.complianceScopesIgnoreResourceIds }}

jobs:
  remediation:
    name: Remediation
    runs-on: ubuntu-latest
    environment: ${{ inputs.planGitHubEnvironment }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Required Modules
        uses: Azure/powershell@v2
        with:
          inlineScript: |
            Install-Module EnterprisePolicyAsCode -Force
          azPSVersion: "latest"

      - name: Azure Login
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          enable-AzPSSession: true
          allow-no-subscriptions: true

      - name: PolicyRemediation
        uses: azure/powershell@v2
        with:
          inlineScript: |
            New-AzRemediationTasks -PacEnvironmentSelector ${{ env.pacEnvironmentSelector }} -OnlyCheckManagedAssignments -TestRun -Interactive $false -InformationAction Continue 
          azPSVersion: "latest"

      # - name: Check for resource compliance at provided scope after remediation
      #   id: post-remediation-scan
      #   uses: azure/policy-compliance-scan@v0
      #   if: ${{ inputs.complianceScopesResourceIds != '' }}
      #   continue-on-error: true
      #   with:
      #     scopes: |
      #       ${{ inputs.complianceScopesResourceIds }}
      #     scopes-ignore: |
      #       ${{ inputs.complianceScopesIgnoreResourceIds }}
            
      - name: Get Current Job Log ID
        uses: Tiryoh/gha-jobid-action@v1
        id: jobs
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          job_name: "Remediation"


      - name: Dispatch compliance issue creation
        if: ${{ inputs.complianceScopesResourceIds != '' }}
        run: |
          echo "Dispatching workflow to create compliance issue from logs..."
          
          # Wait a moment for logs to be available
          sleep 60
          
          # Dispatch the create-issue workflow with the current run ID and job ID
          gh workflow run create-issue.yml \
            -f workflow_run_id="${{ github.run_id }}" \
            -f job_id="${{ steps.jobs.outputs.job_id }}" \
            -f pac_environment="${{ inputs.pacEnvironmentSelector }}" \
            -f triggered_by="${{ github.actor }}" \
          && echo "✅ Successfully dispatched compliance issue creation workflow" \
          || echo "❌ Failed to dispatch compliance issue creation workflow"
        env:
          GH_TOKEN: ${{ github.token }}