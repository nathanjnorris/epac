name: 'Create Compliance Issue from Logs'

on:
  workflow_dispatch:
    inputs:
      workflow_run_id:
        description: 'The workflow run ID to extract compliance data from'
        required: true
        type: string

permissions:
  issues: write
  contents: read
  actions: read

jobs:
  create-compliance-issue:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download workflow logs
        run: |
          echo "Downloading logs for workflow run ID: ${{ inputs.workflow_run_id }}"
          
          # Download the workflow run logs using GitHub CLI
          gh api \
            -H "Accept: application/vnd.github+json" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            "/repos/${{ github.repository }}/actions/runs/${{ inputs.workflow_run_id }}/logs" \
            > workflow_logs.zip
          
          # Extract the zip file
          unzip -q workflow_logs.zip
          
          # Combine all log files into one for easier parsing
          find . -name "*.txt" -type f -exec cat {} \; > combined_logs.txt
          
          echo "=== Log file info ==="
          ls -la combined_logs.txt
          echo "Log file size: $(wc -c < combined_logs.txt) bytes"
          echo "Log file lines: $(wc -l < combined_logs.txt) lines"
          
          echo "=== Searching for compliance-related content ==="
          grep -n -i "compliance\|policy\|noncompliant" combined_logs.txt | head -10 || echo "No compliance keywords found in preview"
        env:
          GH_TOKEN: ${{ github.token }}

      - name: Extract compliance table from logs
        id: extract-compliance
        run: |
          echo "Searching for compliance table in workflow logs..."
          
          COMPLIANCE_TABLE=""
          LOG_FILE="combined_logs.txt"
          
          if [ ! -f "$LOG_FILE" ]; then
            echo "Log file not found: $LOG_FILE"
            echo "has-compliance-data=false" >> $GITHUB_OUTPUT
            echo "compliance-data=Log file not found" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          echo "Analyzing log file: $LOG_FILE ($(wc -l < $LOG_FILE) lines)"
          
          # Method 1: Look for the full compliance table with specific start/end markers
          # Search for table start patterns and extract until table end
          if grep -q "Policy compliance scan report\|╔.*╗\|┌.*┐" "$LOG_FILE"; then
            echo "Found compliance table with borders"
            
            # Find the start line of the compliance table
            START_LINE=$(grep -n "Policy compliance scan report\|╔.*╗\|┌.*┐" "$LOG_FILE" | head -1 | cut -d: -f1)
            
            if [ -n "$START_LINE" ]; then
              echo "Table starts at line: $START_LINE"
              
              # Extract from start line and look for end patterns
              # Look for table end markers (bottom borders or next section)
              TABLE_CONTENT=$(sed -n "${START_LINE},\$p" "$LOG_FILE" | \
                sed '/╚.*╝\|└.*┘\|^[[:space:]]*$/{q;}' | \
                head -100)
              
              # If we didn't find a clear end, try alternative approach
              if [ $(echo "$TABLE_CONTENT" | wc -l) -lt 5 ]; then
                # Extract a reasonable chunk after the start
                TABLE_CONTENT=$(sed -n "${START_LINE},$((START_LINE + 50))p" "$LOG_FILE")
              fi
              
              if [ -n "$TABLE_CONTENT" ]; then
                COMPLIANCE_TABLE="$TABLE_CONTENT"
                echo "✅ Successfully extracted compliance table ($(echo "$TABLE_CONTENT" | wc -l) lines)"
                echo "Table preview (first 10 lines):"
                echo "$TABLE_CONTENT" | head -10
              fi
            fi
          fi
          
          # Method 2: Look for NonCompliant entries with better context extraction
          if [ -z "$COMPLIANCE_TABLE" ] && grep -q "NonCompliant" "$LOG_FILE"; then
            echo "No full table found, extracting NonCompliant entries..."
            
            # Find all lines with NonCompliant and extract surrounding context
            NONCOMPLIANT_LINES=$(grep -n "NonCompliant" "$LOG_FILE" | cut -d: -f1)
            
            if [ -n "$NONCOMPLIANT_LINES" ]; then
              echo "Found NonCompliant entries at lines: $(echo $NONCOMPLIANT_LINES | tr '\n' ' ')"
              
              # Extract context around each NonCompliant entry
              TEMP_FILE=$(mktemp)
              for line in $NONCOMPLIANT_LINES; do
                START=$((line - 5))
                END=$((line + 5))
                [ $START -lt 1 ] && START=1
                
                echo "--- NonCompliant entry context (line $line) ---" >> "$TEMP_FILE"
                sed -n "${START},${END}p" "$LOG_FILE" >> "$TEMP_FILE"
                echo "" >> "$TEMP_FILE"
              done
              
              COMPLIANCE_TABLE=$(cat "$TEMP_FILE")
              rm "$TEMP_FILE"
              
              if [ -n "$COMPLIANCE_TABLE" ]; then
                echo "✅ Extracted NonCompliant entries with context ($(echo "$COMPLIANCE_TABLE" | wc -l) lines)"
                echo "Context preview:"
                echo "$COMPLIANCE_TABLE" | head -15
              fi
            fi
          fi
          
          # Method 3: Look for policy scan results with pattern matching
          if [ -z "$COMPLIANCE_TABLE" ]; then
            echo "No compliance table or NonCompliant entries found, searching for policy scan results..."
            
            # Look for specific patterns that indicate policy scan output
            SCAN_PATTERNS="policy.*scan.*result\|compliance.*assessment\|policy.*evaluation\|remediation.*summary"
            
            if grep -q -i "$SCAN_PATTERNS" "$LOG_FILE"; then
              echo "Found policy scan patterns"
              
              # Extract content around policy scan results
              POLICY_CONTENT=$(grep -i -A 20 -B 5 "$SCAN_PATTERNS" "$LOG_FILE" | head -100)
              
              if [ -n "$POLICY_CONTENT" ]; then
                COMPLIANCE_TABLE="$POLICY_CONTENT"
                echo "✅ Found policy scan results ($(echo "$POLICY_CONTENT" | wc -l) lines)"
                echo "Policy content preview:"
                echo "$POLICY_CONTENT" | head -10
              fi
            fi
          fi
          
          # Method 4: Fallback - search for any structured data with resource names
          if [ -z "$COMPLIANCE_TABLE" ]; then
            echo "No structured data found, looking for resource-related compliance info..."
            
            # Look for Azure resource patterns
            RESOURCE_PATTERNS="/subscriptions/\|microsoft\.\|azure\|resource.*group"
            
            if grep -q -i "$RESOURCE_PATTERNS" "$LOG_FILE"; then
              echo "Found Azure resource references"
              
              # Get lines with resource info and compliance context
              RESOURCE_CONTENT=$(grep -i -B 2 -A 2 "$RESOURCE_PATTERNS" "$LOG_FILE" | \
                grep -i -B 3 -A 3 "compliant\|policy\|violation" | head -50)
              
              if [ -n "$RESOURCE_CONTENT" ]; then
                COMPLIANCE_TABLE="$RESOURCE_CONTENT"
                echo "✅ Found resource compliance information"
                echo "Resource content preview:"
                echo "$RESOURCE_CONTENT" | head -10
              fi
            fi
          fi
          
          # Save results
          if [ -n "$COMPLIANCE_TABLE" ]; then
            {
              echo 'compliance-data<<EOF'
              echo "$COMPLIANCE_TABLE"
              echo 'EOF'
            } >> $GITHUB_OUTPUT
            echo "has-compliance-data=true" >> $GITHUB_OUTPUT
            echo "✅ Compliance data extracted and saved to output ($(echo "$COMPLIANCE_TABLE" | wc -l) lines)"
          else
            echo "❌ No compliance data found in logs"
            echo "has-compliance-data=false" >> $GITHUB_OUTPUT
            echo "compliance-data=No compliance data found in workflow logs" >> $GITHUB_OUTPUT
            
            # Enhanced debugging for large logs
            echo "=== Debug: Log content analysis ==="
            echo "Total lines: $(wc -l < $LOG_FILE)"
            echo "Log file sample (every 1000th line):"
            sed -n '1~1000p' "$LOG_FILE" | head -10
            echo ""
            echo "Lines containing 'policy' (first 10):"
            grep -n -i "policy" "$LOG_FILE" | head -10 || echo "No 'policy' found"
            echo ""
            echo "Lines containing 'compliance' (first 10):"
            grep -n -i "compliance" "$LOG_FILE" | head -10 || echo "No 'compliance' found"
            echo ""
            echo "Lines containing 'noncompliant' (first 10):"
            grep -n -i "noncompliant" "$LOG_FILE" | head -10 || echo "No 'noncompliant' found"
          fi

      - name: Create GitHub issue
        if: steps.extract-compliance.outputs.has-compliance-data == 'true'
        run: |
          echo "Creating GitHub issue with compliance findings..."
          
          # Create the issue body
          cat << 'EOF' > issue_body.md
          ## 📊 Post-Remediation Policy Compliance Issues

          **Source Workflow:** [${{ inputs.workflow_run_id }}](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ inputs.workflow_run_id }})
          **Issue created:** $(date -u)

          ### 🚨 Non-Compliant Resources Found

          The following resources remain non-compliant after remediation attempts:

          ```
          ${{ steps.extract-compliance.outputs.compliance-data }}
          ```

          ### 📋 Next Steps

          1. **Review the non-compliant resources** listed above
          2. **Check if manual remediation** is required for these resources
          3. **Verify policy definitions** are correctly configured
          4. **Consider policy exemptions** if resources should be excluded
          5. **Update resource configurations** to meet policy requirements

          ### ℹ️ About This Issue

          - This issue was automatically created from workflow logs
          - Resources listed above failed automatic remediation
          - Manual intervention may be required
          - Close this issue once all compliance issues are resolved

          ---
          EOF

          # Create the issue using GitHub CLI
          gh issue create \
            --title "🚨 Policy Compliance: - Non-compliant resources require attention" \
            --body-file issue_body.md \
            --label "bug" \
          && echo "✅ GitHub issue created successfully" \
          || echo "❌ Failed to create GitHub issue"
        env:
            GH_TOKEN: ${{ github.token }}

      - name: Log summary
        run: |
          if [ "${{ steps.extract-compliance.outputs.has-compliance-data }}" == "true" ]; then
            echo "✅ Successfully created compliance issue"
            echo "📊 Found compliance data and created GitHub issue"
          else
            echo "ℹ️  No compliance issues found"
            echo "🎉 All resources appear to be compliant!"
          fi