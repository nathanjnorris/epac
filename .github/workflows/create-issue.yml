name: 'Create Compliance Issue from Logs'

on:
  workflow_dispatch:
    inputs:
      workflow_run_id:
        description: 'The workflow run ID to extract compliance data from'
        required: true
        type: string
      epac_dev_scopes:
        description: 'EPaC dev environment resource scopes that were assessed'
        required: false
        type: string
      epac_dev_scopes_ignore:
        description: 'EPaC dev environment resource scopes that were ignored'
        required: false
        type: string
      tenant_scopes:
        description: 'Tenant environment resource scopes that were assessed'
        required: false
        type: string
      tenant_scopes_ignore:
        description: 'Tenant environment resource scopes that were ignored'
        required: false
        type: string

permissions:
  issues: write
  contents: read
  actions: read

jobs:
  create-compliance-issue:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download workflow logs
        run: |
          echo "Downloading logs for workflow run ID: ${{ inputs.workflow_run_id }}"
          
          # Download the workflow run logs using GitHub CLI
          gh api \
            -H "Accept: application/vnd.github+json" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            "/repos/${{ github.repository }}/actions/runs/${{ inputs.workflow_run_id }}/logs" \
            > workflow_logs.zip
          
          # Extract the zip file
          unzip -q workflow_logs.zip
          
          echo "=== Contents of extracted zip file ==="
          echo "All files in current directory:"
          ls -la
          echo ""
          echo "Log files (.txt) found:"
          find . -name "*.txt" -type f | sort
          echo ""
          echo "Individual log file info:"
          for log_file in $(find . -name "*.txt" -type f | sort); do
            echo "  File: $log_file"
            echo "    Size: $(wc -c < "$log_file") bytes"
            echo "    Lines: $(wc -l < "$log_file") lines"
          done
        env:
          GH_TOKEN: ${{ github.token }}

      - name: Extract compliance table from logs
        id: extract-compliance
        run: |
          echo "Searching for compliance tables in specific compliance check log files..."
          
          COMPLIANCE_FOUND=false
          ENVIRONMENT_RESULTS=""
          
          # Store scope information in variables
          EPAC_DEV_SCOPES="${{ inputs.epac_dev_scopes }}"
          EPAC_DEV_SCOPES_IGNORE="${{ inputs.epac_dev_scopes_ignore }}"
          TENANT_SCOPES="${{ inputs.tenant_scopes }}"
          TENANT_SCOPES_IGNORE="${{ inputs.tenant_scopes_ignore }}"
          
          # Define the specific compliance check log files for each environment (with flexible step numbering)
          EPAC_DEV_PATTERN="./Remediate epac-dev environment _ Remediation/*_Check for resource compliance at provided scope after remediation.txt"
          TENANT_PATTERN="./Remediate tenant environment _ Remediation/*_Check for resource compliance at provided scope after remediation.txt"
          
          # Process each environment's compliance check log file
          for env_config in "epac-dev:$EPAC_DEV_PATTERN" "tenant:$TENANT_PATTERN"; do
            ENVIRONMENT=$(echo "$env_config" | cut -d: -f1)
            PATTERN=$(echo "$env_config" | cut -d: -f2-)
            
            echo "=== Analyzing $ENVIRONMENT environment compliance log ==="
            echo "Looking for files matching pattern: $PATTERN"
            
            # Set environment-specific scope variables
            if [ "$ENVIRONMENT" = "epac-dev" ]; then
              CURRENT_SCOPES="${EPAC_DEV_SCOPES:-No scopes configured}"
              CURRENT_SCOPES_IGNORE="${EPAC_DEV_SCOPES_IGNORE:-No scopes ignored}"
            else
              CURRENT_SCOPES="${TENANT_SCOPES:-No scopes configured}"
              CURRENT_SCOPES_IGNORE="${TENANT_SCOPES_IGNORE:-No scopes ignored}"
            fi
            
            # Find the actual file using the pattern
            LOG_FILE=$(find . -path "$PATTERN" -type f | head -1)
            
            if [ -n "$LOG_FILE" ] && [ -f "$LOG_FILE" ]; then
              echo "‚úÖ Found compliance log for $ENVIRONMENT environment: $LOG_FILE"
              echo "File size: $(wc -c < "$LOG_FILE") bytes"
              echo "File lines: $(wc -l < "$LOG_FILE") lines"
              
              # Look for compliance table in this specific file
              if grep -q "Policy compliance scan report\|‚ïî.*‚ïó" "$LOG_FILE"; then
                echo "Found compliance table in $ENVIRONMENT environment"
                
                # Extract from "Policy compliance scan report" to the end of the table (‚ïö.*‚ïù)
                TABLE_CONTENT=$(sed -n '/Policy compliance scan report/,/‚ïö.*‚ïù/p' "$LOG_FILE")
                
                if [ -n "$TABLE_CONTENT" ]; then
                  # Strip timestamps from each line (format: YYYY-MM-DDTHH:MM:SS.XXXXXXXZ)
                  CLEANED_TABLE=$(echo "$TABLE_CONTENT" | sed 's/^[0-9]\{4\}-[0-9]\{2\}-[0-9]\{2\}T[0-9]\{2\}:[0-9]\{2\}:[0-9]\{2\}\.[0-9]\{7\}Z //')
                  
                  # Add environment section to results with scope information
                  ENVIRONMENT_RESULTS="${ENVIRONMENT_RESULTS}

          ## Environment: ${ENVIRONMENT}
          
          **Assessed Scopes:** ${CURRENT_SCOPES}

          **Ignored Scopes:** ${CURRENT_SCOPES_IGNORE}
                
          \`\`\`
          ${CLEANED_TABLE}
          \`\`\`
          "
                  COMPLIANCE_FOUND=true
                  echo "‚úÖ Successfully extracted compliance table for $ENVIRONMENT ($(echo "$CLEANED_TABLE" | wc -l) lines)"
                  echo "Table preview (first 3 lines):"
                  echo "$CLEANED_TABLE" | head -3
                fi
              else
                echo "‚úÖ No compliance issues found in $ENVIRONMENT environment (compliant)"
              fi
            else
              echo "‚ö†Ô∏è  Compliance log file not found for $ENVIRONMENT environment matching pattern: $PATTERN"
              echo "Files found in directory:"
              find "./Remediate $ENVIRONMENT environment _ Remediation/" -name "*.txt" 2>/dev/null || echo "  Directory not found"
            fi
          done
          
          # Save results
          if [ "$COMPLIANCE_FOUND" = true ]; then
            {
              echo 'compliance-data<<EOF'
              echo "$ENVIRONMENT_RESULTS"
              echo 'EOF'
            } >> $GITHUB_OUTPUT
            echo "has-compliance-data=true" >> $GITHUB_OUTPUT
            echo "‚úÖ Compliance data extracted from environments with issues"
          else
            echo "‚ùå No compliance tables found in any environment"
            echo "has-compliance-data=false" >> $GITHUB_OUTPUT
            echo "compliance-data=No compliance tables found in any environment logs" >> $GITHUB_OUTPUT
            
            # Basic debugging
            echo "=== Debug: Checking specific compliance files ==="
            
            EPAC_DEV_FILE=$(find . -path "$EPAC_DEV_PATTERN" -type f | head -1)
            TENANT_FILE=$(find . -path "$TENANT_PATTERN" -type f | head -1)
            
            echo "epac-dev compliance file found: $([ -n "$EPAC_DEV_FILE" ] && echo "YES ($EPAC_DEV_FILE)" || echo "NO")"
            echo "tenant compliance file found: $([ -n "$TENANT_FILE" ] && echo "YES ($TENANT_FILE)" || echo "NO")"
            
            if [ -n "$EPAC_DEV_FILE" ] && [ -f "$EPAC_DEV_FILE" ]; then
              echo "epac-dev file table markers:"
              grep -n "Policy compliance scan report\|‚ïî" "$EPAC_DEV_FILE" || echo "  No table markers found"
            fi
            
            if [ -n "$TENANT_FILE" ] && [ -f "$TENANT_FILE" ]; then
              echo "tenant file table markers:"
              grep -n "Policy compliance scan report\|‚ïî" "$TENANT_FILE" || echo "  No table markers found"
            fi
          fi

      - name: Create GitHub issue
        if: steps.extract-compliance.outputs.has-compliance-data == 'true'
        run: |
          echo "Creating GitHub issue with compliance findings..."
          
          # Create the issue body
          cat << 'EOF' > issue_body.md
          ## ‚ö†Ô∏è Non-compliant resources after remediation

          **Source Workflow:** [${{ inputs.workflow_run_id }}](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ inputs.workflow_run_id }})  

          ### Resources by EPaC environment 

          The following environments have non-compliant resources after remediation:

          ${{ steps.extract-compliance.outputs.compliance-data }}

          ### üìã Next Steps

          1. **Review each environment** listed above for non-compliant resources
          2. **Check environment-specific issues:**
             - Verify policy assignments are correctly configured for each environment
             - Check if resources require manual remediation
             - Review environment-specific exclusions or exemptions
          3. **Consider environment-specific actions:**
             - Update resource configurations to meet policy requirements
             - Apply policy exemptions if business-justified
             - Verify policy definitions work correctly across all environments
          4. **Monitor compliance status** after making changes

          ### üîç Environment-Specific Guidance

          - **epac-dev**: Development environment compliance issues may indicate policy testing needs
          - **tenant**: Production tenant issues require immediate attention and careful remediation

          ---
          *This issue was automatically created from workflow logs. Close when all compliance issues across all environments are resolved.*
          EOF

          # Create the issue using GitHub CLI
          gh issue create \
            --title "üö® Policy Compliance Issues Detected Across Environments" \
            --body-file issue_body.md \
            --label "PolicyCompliance" \
          && echo "‚úÖ GitHub issue created successfully" \
          || echo "‚ùå Failed to create GitHub issue"
        env:
            GH_TOKEN: ${{ github.token }}

      - name: Log summary
        run: |
          if [ "${{ steps.extract-compliance.outputs.has-compliance-data }}" == "true" ]; then
            echo "‚úÖ Successfully created multi-environment compliance issue"
            echo "üìä Found compliance data across environments and created GitHub issue"
          else
            echo "‚ÑπÔ∏è  No compliance issues found in any environment"
            echo "üéâ All resources across all environments appear to be compliant!"
          fi