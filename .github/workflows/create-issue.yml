name: 'Create Compliance Issue from Logs'

on:
  workflow_dispatch:
    inputs:
      workflow_run_id:
        description: 'The workflow run ID to extract compliance data from'
        required: true
        type: string

permissions:
  issues: write
  contents: read
  actions: read

jobs:
  create-compliance-issue:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download workflow logs
        run: |
          echo "Downloading logs for workflow run ID: ${{ inputs.workflow_run_id }}"
          
          # Download the workflow run logs using GitHub CLI
          gh api \
            -H "Accept: application/vnd.github+json" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            "/repos/${{ github.repository }}/actions/runs/${{ inputs.workflow_run_id }}/logs" \
            > workflow_logs.zip
          
          # Extract the zip file
          unzip -q workflow_logs.zip
          
          # Combine all log files into one for easier parsing
          find . -name "*.txt" -type f -exec cat {} \; > combined_logs.txt
          
          echo "=== Log file info ==="
          ls -la combined_logs.txt
          echo "Log file size: $(wc -c < combined_logs.txt) bytes"
          echo "Log file lines: $(wc -l < combined_logs.txt) lines"
          
          echo "=== Searching for compliance-related content ==="
          grep -n -i "compliance\|policy\|noncompliant" combined_logs.txt | head -10 || echo "No compliance keywords found in preview"
        env:
          GH_TOKEN: ${{ github.token }}

      - name: Extract compliance table from logs
        id: extract-compliance
        run: |
          echo "Searching for compliance table in workflow logs..."
          
          COMPLIANCE_TABLE=""
          LOG_FILE="combined_logs.txt"
          
          if [ ! -f "$LOG_FILE" ]; then
            echo "Log file not found: $LOG_FILE"
            echo "has-compliance-data=false" >> $GITHUB_OUTPUT
            echo "compliance-data=Log file not found" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          echo "Analyzing log file: $LOG_FILE ($(wc -l < $LOG_FILE) lines)"
          
          # Method 1: Look for the full compliance table with ASCII borders
          if grep -q "Policy compliance scan report\|╔.*╗" "$LOG_FILE"; then
            echo "Found compliance table with borders"
            
            # Extract from "Policy compliance scan report" to the end of the table (╚.*╝)
            TABLE_CONTENT=$(sed -n '/Policy compliance scan report/,/╚.*╝/p' "$LOG_FILE")
            
            if [ -n "$TABLE_CONTENT" ]; then
              # Strip timestamps from each line (format: YYYY-MM-DDTHH:MM:SS.XXXXXXXZ)
              CLEANED_TABLE=$(echo "$TABLE_CONTENT" | sed 's/^[0-9]\{4\}-[0-9]\{2\}-[0-9]\{2\}T[0-9]\{2\}:[0-9]\{2\}:[0-9]\{2\}\.[0-9]\{7\}Z //')
              
              COMPLIANCE_TABLE="$CLEANED_TABLE"
              echo "✅ Successfully extracted complete compliance table ($(echo "$COMPLIANCE_TABLE" | wc -l) lines)"
              echo "Table preview (first 5 lines):"
              echo "$COMPLIANCE_TABLE" | head -5
              echo "Table end preview (last 5 lines):"
              echo "$COMPLIANCE_TABLE" | tail -5
            fi
          fi
          
          # Save results
          if [ -n "$COMPLIANCE_TABLE" ]; then
            {
              echo 'compliance-data<<EOF'
              echo "$COMPLIANCE_TABLE"
              echo 'EOF'
            } >> $GITHUB_OUTPUT
            echo "has-compliance-data=true" >> $GITHUB_OUTPUT
            echo "✅ Compliance data extracted and saved to output ($(echo "$COMPLIANCE_TABLE" | wc -l) lines)"
          else
            echo "❌ No compliance table found in logs"
            echo "has-compliance-data=false" >> $GITHUB_OUTPUT
            echo "compliance-data=No compliance table found in workflow logs" >> $GITHUB_OUTPUT
            
            # Basic debugging
            echo "=== Debug: Searching for table markers ==="
            echo "Lines containing 'Policy compliance scan report':"
            grep -n "Policy compliance scan report" "$LOG_FILE" || echo "Not found"
            echo "Lines containing table borders '╔':"
            grep -n "╔" "$LOG_FILE" || echo "Not found"
            echo "Lines containing table borders '╚':"
            grep -n "╚" "$LOG_FILE" || echo "Not found"
          fi

      - name: Create GitHub issue
        if: steps.extract-compliance.outputs.has-compliance-data == 'true'
        run: |
          echo "Creating GitHub issue with compliance findings..."
          
          # Create the issue body
          cat << 'EOF' > issue_body.md
          ## 📊 Policy Compliance Issues

          **Source Workflow:** [${{ inputs.workflow_run_id }}](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ inputs.workflow_run_id }})  
          **Detected:** $(date -u '+%Y-%m-%d %H:%M UTC')

          ### 🚨 Non-Compliant Resources

          The following resources remain non-compliant after remediation:

          ```
          ${{ steps.extract-compliance.outputs.compliance-data }}
          ```

          ### 📋 Next Steps

          - Review the non-compliant resources listed above
          - Check if manual remediation is required
          - Verify policy definitions are correctly configured
          - Consider policy exemptions if appropriate
          - Update resource configurations to meet requirements

          ---
          *This issue was automatically created from workflow logs. Close when all compliance issues are resolved.*
          EOF

          # Create the issue using GitHub CLI
          gh issue create \
            --title "🚨 Policy Compliance Issues Detected" \
            --body-file issue_body.md \
            --label "PolicyCompliance" \
          && echo "✅ GitHub issue created successfully" \
          || echo "❌ Failed to create GitHub issue"
        env:
            GH_TOKEN: ${{ github.token }}

      - name: Log summary
        run: |
          if [ "${{ steps.extract-compliance.outputs.has-compliance-data }}" == "true" ]; then
            echo "✅ Successfully created compliance issue"
            echo "📊 Found compliance data and created GitHub issue"
          else
            echo "ℹ️  No compliance issues found"
            echo "🎉 All resources appear to be compliant!"
          fi